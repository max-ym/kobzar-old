; The execution of the kernel begins here. This code
; must setup the Long Mode and transafere execution to the
; rust code.
format ELF64

CODE_SEG    equ 0x0008
DATA_SEG    equ 0x0010
TSS_SEG     equ 0x0018

; #####
; ### MultiBoot header
; #

MBALIGN     equ  1 shl 0    ; Align loaded modules on page boundaries
MEMINFO     equ  1 shl 1    ; Provide memory map

; Multiboot 'flag' field
FLAGS       equ  MBALIGN or MEMINFO

; 'magic number' lets bootloader find the header
MAGIC       equ  0x1BADB002

; Checksum of above, to prove we are multiboot
CHECKSUM    equ -(MAGIC + FLAGS)

STACK_TOP   equ 0x80000

PAGE_START  equ 0x7C000
PD          equ 0x7C000
PDPT        equ 0x7D000
PML4        equ 0x7E000
PAGE_END    equ 0x7F000

PDT         equ 0x9000
APIC        equ 0x1000

; Offsets of ProcessorData struct fields in Rust code.
PROCDATA_XSAVE      equ 0x00
PROCDATA_XMASK      equ 0x08
PROCDATA_GPREGS     equ 0x10
PROCDATA_FLAGS      equ 0x18

; Offsets of stack data of IRQ handler after CPL change with no error on stack.
ISRSTK_SS           equ 0x20
ISRSTK_RSP          equ 0x18
ISRSTK_FLAGS        equ 0x10
ISRSTK_CS           equ 0x08
ISRSTK_RIP          equ 0x00

; Declare a header as required by the Multiboot Standard.
section '.multiboot'
    dd      MAGIC
    dd      FLAGS
    dd      CHECKSUM

section '.data'
public gdt
gdt:
.null:
    dq      0x0000000000000000  ; Null Descriptor - should be present.
.code:
    dw      0xFFFF              ; limit 0 - 15
    dw      0                   ; base 0 - 15
    db      0                   ; base 16 - 23
    db      10011000b           ; access byte
    db      10111111b           ; flags + limit
    db      0                   ; base 24 - 31

.data:
    dw      0xFFFF              ; limit 0 - 15
    dw      0                   ; base 0 - 15
    db      0                   ; base 16 - 23
    db      10010010b           ; access byte
    db      10011111b           ; flags
    db      0                   ; base 24 - 31

.tss:
    dw      0                   ; limit 0 - 15
    dw      0                   ; base 0 - 15
    db      0                   ; base 16 - 23
    db      10001001b           ; access byte
    db      00010000b           ; flags
    db      0                   ; base 24 - 31
    dd      0                   ; base 32 - 63
    dd      0                   ; RESERVED
.end:

.pointer:
    dw      gdt.end - gdt - 1   ; 16-bit Size (Limit) of GDT.
    dd      gdt                 ; 32-bit Base Address of GDT.
                                ; (CPU will zero extend to 64-bit).


; #####
; ### Code
; #

section '.text' align 16

use64
; Interrupt handler of change process signal which is fired by scheduler and is
; sent to appropriate processor cores. This ISR must save all registers
; that were used, load new values to system registers to prepare for running
; another process. Then this ISR launches other process or halt the CPU as
; suggested by the scheduler.
public isr_sched_process_change
isr_sched_process_change:
    ; Backup used by CPUID registers.
    mov     [esp - 0x08 ], rax
    mov     [esp - 0x10 ], rbx
    mov     [esp - 0x18 ], rcx
    mov     [esp - 0x20 ], rdx

    ; Get processor ID.
    mov     eax, 1
    cpuid
                        ; ID stored in EBX in last byte.
    shr     ebx, 24     ; Save in EBX processor ID.

    mov     edx, [ebx * 8 + PDT] ; Load pointer of PDT to frame data.

    ; Check whether GP register must be saved.
    mov     eax, [edx + PROCDATA_FLAGS]     ; Load flags.
    and     eax, 1 shl 3                    ; Whether GP must be saved.
    jz      @f                              ; Don't save.

    ; Save GPs.
    mov     rbx, [edx + PROCDATA_GPREGS]    ; Get address of GP file.
    mov     [rbx + 8 * 0x4], rsi
    mov     [rbx + 8 * 0x5], rdi
    mov     [rbx + 8 * 0x6], rbp
    mov     [rbx + 8 * 0x7], r8
    mov     [rbx + 8 * 0x8], r9
    mov     [rbx + 8 * 0x9], r10
    mov     [rbx + 8 * 0xA], r11
    mov     [rbx + 8 * 0xB], r12
    mov     [rbx + 8 * 0xC], r13
    mov     [rbx + 8 * 0xD], r14
    mov     [rbx + 8 * 0xE], r15
    mov     r8 , [esp - 0x08]           ; Load backup RAX to R8.
    mov     r9 , [esp - 0x10]           ; Load backup RBX to R9.
    mov     r10, [esp - 0x18]           ; Load backup RCX to R10.
    mov     r11, [esp - 0x20]           ; Load backup RDX to R11.
    mov     r12, [esp + ISRSTK_FLAGS]   ; Load FLAGSQ to R12.
    mov     r13, [esp + ISRSTK_RIP]     ; Load RIP to R13.
    mov     r14, [esp + ISRSTK_RSP]     ; Load RSP to R14.
    mov     [rbx          ], r8         ; Save backup RAX.
    mov     [rbx + 8 * 0x1], r9         ; Save backup RBX.
    mov     [rbx + 8 * 0x2], r10        ; Save backup RCX.
    mov     [rbx + 8 * 0x3], r11        ; Save backup RDX.

    mov     [rbx + 8 * 0x0F], r12       ; Save FLAGSQ
    mov     [rbx + 8 * 0x10], r13       ; Save RIP
    mov     [rbx + 8 * 0x11], r14       ; Save RSP

@@:
extrn    rust_isr_sched_process_change
    call rust_isr_sched_process_change
    iret

public _start
use32
_start:

    ; >>>>> >>>>>
    ; To work properly, we need to do some basic things first.
    ; 1. Set up stack register.
    ; 2. Allocate space for the pointer to the GRUB information structure.
    ; 3. Save the pointer
    ; >>>>>

    mov      esp , STACK_TOP - 4    ; 1 and 2
    mov     [esp], ebx              ; 3

    ; >>>>> >>>>>
    ; Now we need to check if Kobzar kernel is able to work on this CPU.
    ; We need x86_64 CPU, so let's check if CPUID instruction is supported.
    ; Then we can use it to test if LongMode is available.
    ;
    ; 1. Check CPUID support
    ; 2. Check Extended CPUID support
    ; 3. Check LongMode support
    ; >>>>>

    ; Step 1
    pushfd                  ; Get flags
    mov     eax, [esp]      ; Save them in %EAX and %EDX registers
    mov     edx, [esp]

    xor      eax , 1 shl 21 ; Flip the ID-bit, which is 21-st bit
    mov     [esp], eax      ; Save result back in stack...
    popfd                   ; and pop flags back to Flag Register
    pushfd                  ; Get flags back...
    mov      eax , [esp]    ; and save in %EAX
    mov     [esp],  edx     ; Restore initial flags
    popfd
    xor     eax, edx        ; Check if flag flipped
    jz      .no_cpuid       ; If it didn't, CPUID is not supported

    ; Step 2
    mov     eax, 0x80000000
    cpuid
    cmp     eax, 0x80000001
    jb      .no_ext_cpuid

    ; Step 3
    mov     eax, 0x80000001
    cpuid
    bt      edx, 29         ; Test LongMode bit
    jnc     .no_long_mode   ; If it is not set, LongMode is not supported



    ; >>>>> >>>>>
    ; Now we need to prepare everything to enter LongMode.
    ; 1. Disable old paging
    ; 2. Load CR3 with the physical address of the PML4
    ; 3. Set up paging tables
    ; 4. (DISABLED) Check PCID support and set it if it is supported
    ; 5. Enable PAE
    ; 6. Enable long mode by setting the EFER.LME flag in MSR 0xC0000080
    ; 7. Enable paging
    ; 8. Jump to 64-bit world
    ; >>>>>

    ; Step 1
    mov     eax, cr0
    and     eax, not (1 shl 31)    ; Disable PG bit in CR0
    mov     cr0, eax

    ; Step 2
    mov     eax, PML4
    mov     cr3, eax

    ; Step 3
    xor     eax, eax
    mov     edi, PAGE_START
    mov     ecx, (PAGE_END - PAGE_START) / 4
rep stosd
    mov            edi ,     PML4
    mov     dword [edi], 3 + PDPT ; Is present and read/write-able
    mov            edi ,     PDPT
    mov     dword [edi], 3 + PD
    mov            edi ,     PD
    mov     dword [edi], 3 + 128 + 16 + 8 ; Is also 2MiB and strong uncachable

    ; Step 4
    ;mov     eax, 1
    ;cpuid
    mov     eax, cr4       ; Get %CR4 for following changes
    ;test    ecx, 1 shl 17  ; Check PCID bit
    ;jz      @f             ; If it is not set, just skip to the Step 5
    ;or      eax, 1 shl 17  ; if it is set, set PCID bit

    ; Step 5 (Don't change eax from step 4)
  @@:
    or      eax, 1 shl 5
    mov     cr4, eax          ; Save changes back to %CR4

    ; Step 6
    mov     ecx, 0xC0000080
    rdmsr                     ; Read MSR to %EAX
    or      eax, 1 shl 8      ; set LME bit (Long Mode Enable)
    wrmsr

    ; Step 7
    mov     eax, cr0
    or      eax, 1 shl 31     ; Enable Paging bit
    mov     cr0, eax

    ; Step 8
    lgdt    [gdt.pointer]
    jmp     CODE_SEG:@f



use64       ; 64 bit world
  @@:
    ; Set up data segment registers
    mov     ax, DATA_SEG
    mov     ds, ax
    mov     es, ax
    mov     fs, ax
    mov     gs, ax
    mov     ss, ax

    ; We want to enable SSE. It is ALWAYS supported on CPUs with Long Mode.
    ; Furthermore, at least SSE2 is supported too (according to AMD64 specs).
    mov     rax, cr0
    and      ax, 0xFFFB     ; Clear coprocessor emulation CR0.EM
    or       ax, 0x2        ; Set coprocessor monitoring CR0.MP
    mov     cr0, rax
    mov     rax, cr4
    or       ax, 3 shl 9    ; Set CR4.OSFXSR and CR4.OSXMMEXCPT
    mov     cr4, rax

    ; Setup identity paging
    mov     edi, PDPT + 8
    mov     eax, 3 + PD
    mov     ecx, 511
rep stosq
    mov     edi, PD + 8
    mov     eax, 128 + 3
    mov     ecx, 511
rep stosq

    ; Pass control to higher level code
    mov     esi, [esp]     ; This will be passed as argument to highlevel code
    mov     esp, STACK_TOP
            extrn main
    jmp     main
    ; Kernel asembler booting is done by now


; >>>>> >>>>>
; ERRORS that occur on beginning of the initialization.
; >>>>>
use32
  ; TODO do some fun stuff in spite of halting on compatibility errors.
  .end:
    mov      esi , 0xB8000
    mov     [esi], byte 'E'
    hlt
    jmp     .end        ; Make a deadloop with jmp just to make sure
  .end.print:
    mov      al  , [esi]
    mov     [edi],  al
    add      edi ,  2
    inc      esi
    and      al  , al
    jnz     .end.print
    ret
  .no_ext_cpuid:
    call    .end.prerr
    mov     esi, @f
    call    .end.print
    jmp     .end
  @@:
    db      'NO_EXT_CPUID Extended CPUID is required to start the kernel', 0
  .no_cpuid:
    call    .end.prerr
    mov     esi, @f
    call    .end.print
    jmp     .end
  @@:
    db      'NO_CPUID Processor is quite too old to run Kobzar Kernel', 0
  .no_long_mode:
    call    .end.prerr
    mov     esi, @f
    call    .end.print
    jmp     .end
  @@:
    db      'NO_LONG_MODE Operating System is x64, so Long Mode is '
    db      'required', 0
  .end.prerr:
    mov     edi, 0xB8000
    mov     esi, @f
    jmp     .end.print
  @@:
    db      'ERROR:', 0
